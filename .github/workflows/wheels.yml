name: Build Wheels

# Reference:
# https://github.com/scikit-image/scikit-image/blob/main/.github/workflows/wheels_recipe.yml

on:
#   push:
#     branches: [ "main" ]
#     paths:
#       - cpp_ext/src/*
  workflow_dispatch:

env:
  CIBW_BUILD_VERBOSITY: 1
  CIBW_BUILD: "cp3{9,10}-*"

jobs:
  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
        
    - uses: pypa/cibuildwheel@v2.13.0
      env:
        # MacOS
        CIBW_ARCHS_MACOS: arm64
        CIBW_BEFORE_ALL_MACOS: >
          arch -arm64 brew install opencv &&
          sudo conda create -n build https://anaconda.org/conda-forge/llvm-openmp/11.1.0/download/osx-arm64/llvm-openmp-11.1.0-hf3c4609_1.tar.bz2
        # CIBW_BEFORE_ALL_MACOS: >
        #   sudo conda create -n build https://anaconda.org/conda-forge/llvm-openmp/11.1.0/download/osx-arm64/llvm-openmp-11.1.0-hf3c4609_1.tar.bz2
        # CIBW_BEFORE_BUILD_MACOS: >
        #   # brew install opencv
        #   brew fetch --force --bottle-tag=arm64_monterey opencv &&
        #   brew install $(brew --cache --bottle-tag=arm64_monterey opencv)  &&
        #   CMAKE_PREFIX_PATH="/usr/local/miniconda/envs/build:$(brew --prefix opencv)"  
        #   # PKG_CONFIG_PATH="$(brew --prefix opencv)/lib/pkgconfig"
        CIBW_ENVIRONMENT_MACOS: >
          CMAKE_PREFIX_PATH="/usr/local/miniconda/envs/build" 
          # PKG_CONFIG_PATH="$(brew --prefix opencv)/lib/pkgconfig"
          MACOSX_DEPLOYMENT_TARGET=12.6.8
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
          DYLD_LIBRARY_PATH=/usr/local/miniconda/envs/build/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

        # Linux
        CIBW_ARCHS_LINUX: auto64
        CIBW_BEFORE_ALL_LINUX: >
          git clone --depth 1 --branch 4.6.0 https://github.com/opencv/opencv.git &&
          cd opencv && mkdir -p build && cd build &&
          cmake .. -DBUILD_LIST=core,imgproc &&
          cmake --build . -j 2 &&
          cmake --install . 

        # Windows
        CIBW_ARCHS_WINDOWS: auto64
        CIBW_BEFORE_ALL_WINDOWS: >
          choco install opencv
        CIBW_ENVIRONMENT_WINDOWS: >
          OpenCV_DIR="c:/tools/opencv/build"

        # Temporary: use pre-release Python 3.12 for stable ABI builds
        CIBW_PRERELEASE_PYTHONS: True
      with:
        package-dir: ./cpp_ext
        config-file: "{package}/pyproject.toml"

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: artifact
        path: wheelhouse/*.whl
        
    - name: Display structure of downloaded files
      run: ls -R

  push_wheels:
    name: Push wheels
    needs: build_wheels
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: artifact
        path: ./cpp_ext/dist
        
    - name: Display structure of downloaded files
      run: ls -R
      
    - name: Push generated wheels
      run: |
        git config user.name github-actions[bot]
        git config user.email github-actions[bot]@users.noreply.github.com
        git add .
        if git commit -m "Generate files by GitHub Actions"; then
            git push
        fi
        
